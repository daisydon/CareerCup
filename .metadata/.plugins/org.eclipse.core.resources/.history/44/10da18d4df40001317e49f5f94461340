package leetCode;

/**
 * Say you have an array for which the ith element is the price of a given stock on day i. 
 * If you were only permitted to complete at most one transaction 
 * (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
 * 
 * prices[j] - prices[i]  (j>i)
 * 
 * @author LinyuDong
 * 
 */

public class BestTimeToBuyandSellStock {
	public int maxProfit(int[] prices) {
		// Note: The Solution object is instantiated only once and is reused by
		// each test case.
		int[] min = new int[prices.length+1];
		int[] benefit = new int[prices.length+1];
		int profit = 0; 
		min[1] = prices[1];
		benefit[1] = 0;
		for(int i = 2; i < prices.length+1; i++){
			if(min[i-1] < prices [i]){
				benefit [i] = prices[i] - min[i-1];
				min[i] = min[i-1];
			}else {
			    min[i] = prices[i];
			    benefit [i] = benefit[i-1];
			}
			if(){
				
			}
			
		}
		
		return profit;
	}
}
